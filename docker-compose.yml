version: '3.8'

services:
  # Nginx
  nginx:
    image: jonasal/nginx-certbot:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/production/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/production/certbot:/etc/letsencrypt
      # FastAPI 정적 파일에 접근 가능하도록
      - ./server/app/static:/app/static:ro
      - ./server/app/templates:/app/templates:ro
    env_file:
      - ./nginx-certbot.env

  # FastAPI 애플리케이션
  app:
    build: .
    ports:
      - "8000:8000"
    depends_on:
      - database
      - redis
    profiles:
      - production
    volumes:
      - .:/app
      # 정적 파일을 위한 volume (nginx에서 접근 가능하도록)
      - ./server/app/static:/app/static:ro
      - ./server/app/templates:/app/templates:ro
    env_file:
      - .env
    environment:
      # Worker 설정 (async/sync 선택)
      WORKER_TYPE: ${WORKER_TYPE:-async}
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-9} 
      GUNICORN_THREADS: ${GUNICORN_THREADS:-2}
      SECRET_NAME: ${SECRET_NAME}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-ap-northeast-2}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    command: gunicorn -c gunicorn.py src.main:app

  # DDNS Route53
  ddns-route53:
    image: crazymax/ddns-route53:latest
    container_name: ddns-route53
    restart: always
    volumes:
      - ./ddns-route53.yml:/ddns-route53.yml:ro
    environment:
      - TZ=Asia/Seoul
      - SCHEDULE=*/15 * * * *
      - LOG_LEVEL=info
      - LOG_JSON=false
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}
      - DOMAINS=${DOMAINS}
    profiles:
      - production
  # MariaDB 데이터베이스
  database:
    image: mariadb:10.11
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mariadb_data:/var/lib/mysql
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    profiles:
      - production

  # Redis (캐시 및 세션 저장소)
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    profiles:
      - production

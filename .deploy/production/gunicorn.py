# =============================================================================
# Gunicorn 설정 파일
# =============================================================================
# 이 파일은 FastAPI 애플리케이션을 위한 Gunicorn 서버 설정을 정의합니다.
# 동기/비동기 Worker를 환경변수로 선택할 수 있습니다.

import multiprocessing
import os

# =============================================================================
# 기본 서버 설정
# =============================================================================
bind = "0.0.0.0:8000"  # 서버가 바인딩될 주소와 포트

# =============================================================================
# Worker 설정 - 환경변수로 동기/비동기 선택 가능
# =============================================================================
worker_type = os.environ.get("WORKER_TYPE", "async")  # "async" 또는 "sync"

if worker_type == "async":
    # =====================================================================
    # 비동기 설정 (FastAPI async 기능 활용)
    # =====================================================================
    # - UvicornWorker: ASGI 비동기 Worker
    # - FastAPI의 async/await 함수들을 비동기로 처리
    # - FastAPI의 동기 함수들도 비동기 컨텍스트에서 실행
    # - I/O 집약적 작업에 최적화 (DB 쿼리, API 호출 등)
    # - Worker 수: CPU 코어 × 2 + 1 (I/O 대기 시간 활용)
    workers = int(
        os.environ.get("GUNICORN_WORKERS", multiprocessing.cpu_count() * 2 + 1)
    )
    worker_class = "uvicorn.workers.UvicornWorker"
    worker_connections = 1000  # 각 Worker가 처리할 수 있는 동시 연결 수

elif worker_type == "sync":
    # =====================================================================
    # 동기 설정 (CPU 집약적 작업에 적합)
    # =====================================================================
    # - SyncWorker: 전통적인 동기 Worker
    # - FastAPI의 모든 함수를 동기로 처리 (async 함수도 동기로 실행)
    # - CPU 집약적 작업에 최적화 (계산, 이미지 처리, 암호화 등)
    # - Worker 수: CPU 코어 수 (CPU 바운드 작업)
    # - 스레드: 각 Worker당 여러 스레드로 동시 처리
    workers = int(os.environ.get("GUNICORN_WORKERS", multiprocessing.cpu_count()))
    worker_class = "gunicorn.workers.SyncWorker"
    threads = int(os.environ.get("GUNICORN_THREADS", 2))  # 각 Worker당 스레드 수
    worker_connections = 1000

# =============================================================================
# 요청 처리 설정
# =============================================================================
max_requests = 1000  # Worker가 처리할 최대 요청 수 (메모리 누수 방지)
max_requests_jitter = 50  # 재시작 시점에 랜덤성 추가 (동시 재시작 방지)

# =============================================================================
# 로그 설정
# =============================================================================
accesslog = "-"  # 액세스 로그를 stdout으로 출력
errorlog = "-"  # 에러 로그를 stdout으로 출력
loglevel = "info"  # 로그 레벨 (debug, info, warning, error, critical)

# =============================================================================
# 프로세스 관리 설정
# =============================================================================
preload_app = True  # 앱을 미리 로드하여 메모리 사용량 최적화
keepalive = 2  # Keep-Alive 연결 유지 시간 (초)
timeout = 30  # Worker가 응답하지 않을 때 강제 종료 시간 (초)
graceful_timeout = 30  # Graceful shutdown 대기 시간 (초)

# =============================================================================
# 보안 설정
# =============================================================================
limit_request_line = 4094  # HTTP 요청 라인 최대 길이
limit_request_fields = 100  # HTTP 헤더 최대 개수
limit_request_field_size = 8190  # HTTP 헤더 필드 최대 크기

# =============================================================================
# 성능 최적화 설정
# =============================================================================
worker_tmp_dir = "/dev/shm"  # 메모리 기반 임시 디렉토리 사용 (디스크 I/O 감소)
